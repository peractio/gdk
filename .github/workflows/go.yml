name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  HOME: "/home/runner/gdk/_work/"
  GOPRIVATE: "github.com/peractio/*"
  GOPATH: "/home/runner/gdk/_work/gdk/go"
  GO111MODULE: on

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go mod vendor -v

      - name: Build
        run: go build -v .

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13

      - name: Checkout Main
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Test Main Branch
        run: |
          go test ./... -cover -count=1 -race -coverprofile ../main.out

      - name: Set Main Branch Code Coverage
        id: codecov-main-branch
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const go_coverage = require(`.github/scripts/go_coverage.js`)
            return await go_coverage({file: "../main.out"})

      - name: Checkout PR Branch
        uses: actions/checkout@v2

      - name: Test PR Branch
        run: |
          go test ./... -cover -count=1 -race -coverprofile ../pr.out

      - name: Set PR Branch Code Coverage
        id: codecov-pr-branch
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const go_coverage = require(`.github/scripts/go_coverage.js`)
            return await go_coverage({file: "../pr.out"})

      - name: Create Comment
        uses: actions/github-script@v3
        env:
          main_code_cov: ${{steps.codecov-main-branch.outputs.result}}
          pr_code_cov: ${{steps.codecov-pr-branch.outputs.result}}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runID = ${{github.run_id}}
            mainCodeCov =  process.env.main_code_cov.replace(/[\n\t\r]/g,"")
            prCodeCov =  process.env.pr_code_cov.replace(/[\n\t\r]/g,"")

            const body = `
            ### Test Coverage Result
            Success! :confetti_ball::confetti_ball::confetti_ball:

            **Code Coverage**
            Main: ${mainCodeCov}
            PR  : ${prCodeCov}

            Check Detail: [Here](https://github.com/${context.issue.owner}/${context.issue.repo}/actions/runs/${runID})
            `

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
